import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import "./index.css";
import App from "./App";
import Results from "./routes/Results";

// Create a mock project provider for now
const ProjectProvider = ({ children }: { children: React.ReactNode }) => <>{children}</>;

// Simple placeholder components for testing
const HomeComponent = () => (
  <div className="card">
    <h1>üè† Kakerlake PV/WP Tool</h1>
    <p>Willkommen beim Photovoltaik und W√§rmepumpen Planungstool</p>
  </div>
);

const PlaceholderPage = ({ title }: { title: string }) => (
  <div className="card">
    <h1>{title}</h1>
    <p>Diese Seite ist noch in Entwicklung...</p>
  </div>
);

function AppWithRoutes() {
  return (
    <Routes>
      <Route index element={<Navigate to="/home" replace />} />
      <Route path="/home" element={<HomeComponent />} />
      
      {/* Project Routes */}
      <Route path="/project/mode" element={<PlaceholderPage title="üìä Anlagenmodus" />} />
      <Route path="/project/customer" element={<PlaceholderPage title="üë§ Kundendaten" />} />
      <Route path="/project/building" element={<PlaceholderPage title="üè¢ Geb√§udedaten" />} />
      <Route path="/project/demand" element={<PlaceholderPage title="‚ö° Bedarfsanalyse" />} />
      <Route path="/project/needs" element={<PlaceholderPage title="ÔøΩ Bed√ºrfnisse" />} />
      <Route path="/project/options" element={<PlaceholderPage title="‚öôÔ∏è Zusatzoptionen" />} />
      
      {/* Calculation Routes */}
      <Route path="/calc/solar" element={<PlaceholderPage title="‚òÄÔ∏è Solarkalkulator" />} />
      <Route path="/calc/heatpump" element={<PlaceholderPage title="üî• W√§rmepumpen-Sim" />} />
      <Route path="/calc/results" element={<Results />} />
      
      {/* PDF Routes */}
      <Route path="/pdf/standard" element={<PlaceholderPage title="üìÑ Standard-PDF" />} />
      <Route path="/pdf/extended" element={<PlaceholderPage title="üìë Erweiterte PDFs" />} />
      <Route path="/pdf/multi" element={<PlaceholderPage title="üìö Multi-PDF" />} />
      <Route path="/pdf/preview" element={<PlaceholderPage title="üëÅÔ∏è Vorschau" />} />
      
      {/* CRM Routes */}
      <Route path="/crm/dashboard" element={<PlaceholderPage title="üìà CRM Dashboard" />} />
      <Route path="/crm/customers" element={<PlaceholderPage title="üë• Kundenverwaltung" />} />
      <Route path="/crm/pipeline" element={<PlaceholderPage title="üîÑ Pipeline & Workflows" />} />
      <Route path="/crm/calendar" element={<PlaceholderPage title="üìÖ Kalender" />} />
      <Route path="/crm/quick-calc" element={<PlaceholderPage title="‚ö° Schnellkalkulation" />} />
      
      {/* Planning Routes */}
      <Route path="/planning/info" element={<PlaceholderPage title="‚ÑπÔ∏è Informationsportal" />} />
      <Route path="/planning/documents" element={<PlaceholderPage title="üìã Dokumente" />} />
      
      {/* Admin Routes */}
      <Route path="/admin/login" element={<PlaceholderPage title="üîê Login" />} />
      <Route path="/admin/companies" element={<PlaceholderPage title="üè¢ Firmenverwaltung" />} />
      <Route path="/admin/products" element={<PlaceholderPage title="üì¶ Produktverwaltung" />} />
      <Route path="/admin/price-matrix" element={<PlaceholderPage title="üí∞ Preis-Matrix" />} />
      <Route path="/admin/tariffs" element={<PlaceholderPage title="üí° Tarifverwaltung" />} />
      <Route path="/admin/settings" element={<PlaceholderPage title="‚öôÔ∏è Einstellungen" />} />
      
      <Route path="*" element={<PlaceholderPage title="‚ùì Seite nicht gefunden" />} />
    </Routes>
  );
}

function Home() {
  const navigate = useNavigate();

  const clearAllData = () => {
    if (confirm('‚ö†Ô∏è ACHTUNG: Alle gespeicherten Projektdaten l√∂schen?\n\nDies l√∂scht:\n- Kundendaten\n- Geb√§udedaten\n- Verbrauchsdaten\n- Alle Projekteinstellungen\n\nDieser Vorgang kann nicht r√ºckg√§ngig gemacht werden!')) {
      // L√∂sche alle Kakerlake localStorage-Daten
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('kakerlake')) {
          localStorage.removeItem(key);
        }
      });
      alert('‚úÖ Alle Projektdaten wurden erfolgreich gel√∂scht!');
      window.location.reload(); // Seite neu laden f√ºr sauberen Zustand
    }
  };

  const menuItems = [
    { 
      id: 'project', 
      title: 'Neues Projekt', 
      icon: 'üèóÔ∏è', 
      color: 'text-blue-600', 
      path: '/project',
      description: 'Starten Sie ein neues PV-Projekt mit vollst√§ndiger Bedarfsanalyse' 
    },
    { 
      id: 'solar', 
      title: 'Solar-Rechner', 
      icon: '‚òÄÔ∏è', 
      color: 'text-green-600', 
      path: '/solar',
      description: 'Schnelle Kalkulation f√ºr Photovoltaik-Anlagen' 
    },
    { 
      id: 'heatpump', 
      title: 'W√§rmepumpe', 
      icon: 'üî•', 
      color: 'text-orange-600', 
      path: '/heatpump',
      description: 'W√§rmepumpen-Simulation und Dimensionierung' 
    },
    { 
      id: 'pdf', 
      title: 'PDF-Generator', 
      icon: 'üìÑ', 
      color: 'text-purple-600', 
      path: '/pdf',
      description: 'Professionelle Angebote und Dokumentationen' 
    },
    { 
      id: 'crm', 
      title: 'CRM', 
      icon: 'üë•', 
      color: 'text-indigo-600', 
      path: '/crm',
      description: 'Kundenverwaltung und Projekt-Pipeline' 
    },
    { 
      id: 'admin', 
      title: 'Administration', 
      icon: '‚öôÔ∏è', 
      color: 'text-gray-600', 
      path: '/admin',
      description: 'System-Einstellungen und Konfiguration' 
    }
  ];

  const handleMenuClick = (path: string) => {
    console.log(`Navigating to: ${path}`);
    navigate(path);
  };

  return (
    <div className="max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-gray-800 mb-2">Willkommen bei Kakerlake</h2>
        <p className="text-gray-600">Ihr professionelles Tool f√ºr PV- und W√§rmepumpen-Projekte</p>
      </div>
      
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {menuItems.map((item) => (
          <div 
            key={item.id}
            onClick={() => handleMenuClick(item.path)}
            className="bg-white p-6 rounded-lg shadow border hover:shadow-lg transition-all cursor-pointer hover:scale-105 active:scale-95"
          >
            <div className="text-2xl mb-3">{item.icon}</div>
            <h3 className={`font-semibold text-lg mb-2 ${item.color}`}>{item.title}</h3>
            <p className="text-gray-600">{item.description}</p>
          </div>
        ))}
      </div>
      
      <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
        <h3 className="font-semibold text-green-800 flex items-center mb-2">
          ‚úÖ System Status
        </h3>
        <div className="space-y-2 text-sm">
          <div className="flex justify-between">
            <span className="text-green-700">App Status:</span>
            <span className="text-green-800 font-medium">L√§uft erfolgreich</span>
          </div>
          <div className="flex justify-between">
            <span className="text-green-700">Aktueller Pfad:</span>
            <span className="text-green-800 font-mono">{window.location.pathname}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-green-700">Build-Zeit:</span>
            <span className="text-green-800 font-mono">{new Date().toLocaleString('de-DE')}</span>
          </div>
        </div>
      </div>

      {/* Developer Tools */}
      <div className="bg-red-50 border border-red-200 rounded-lg p-6">
        <h3 className="font-semibold text-red-800 flex items-center mb-2">
          üõ†Ô∏è Entwickler-Tools
        </h3>
        <p className="text-red-700 text-sm mb-4">
          Diese Funktionen sind f√ºr Entwicklung und Debugging gedacht.
        </p>
        <div className="flex gap-3">
          <button
            onClick={clearAllData}
            className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm font-medium transition-colors flex items-center gap-2"
          >
            üóëÔ∏è Alle Projektdaten l√∂schen
          </button>
          <button
            onClick={() => {
              console.log('localStorage contents:', localStorage);
              alert('Siehe Browser-Konsole (F12) f√ºr localStorage-Inhalte');
            }}
            className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg text-sm font-medium transition-colors flex items-center gap-2"
          >
            üîç localStorage anzeigen
          </button>
        </div>
      </div>
    </div>
  );
}

function NotFound() {
  return (
    <div className="text-center py-12">
      <div className="text-6xl mb-4">üîç</div>
      <h2 className="text-2xl font-bold text-red-600 mb-2">Seite nicht gefunden</h2>
      <p className="text-gray-600 mb-6">Die angeforderte Seite existiert nicht.</p>
      <Link 
        to="/home" 
        className="inline-block bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-colors"
      >
        üè† Zur Startseite
      </Link>
    </div>
  );
}

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <BrowserRouter>
      <ProjectProvider>
        <App />
      </ProjectProvider>
    </BrowserRouter>
  </React.StrictMode>
);
